//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.8.1
//     from Assets/DrawingActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;
using UnityEngine;

public partial class @DrawingActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @DrawingActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""DrawingActions"",
    ""maps"": [
        {
            ""name"": ""Drawing"",
            ""id"": ""a9100e1e-2c6a-4845-a154-6423e522bc6c"",
            ""actions"": [
                {
                    ""name"": ""Draw"",
                    ""type"": ""PassThrough"",
                    ""id"": ""407f74fc-08cb-451d-88d9-5972d4816c8c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Position"",
                    ""type"": ""Value"",
                    ""id"": ""a5a85b66-7130-446e-afae-89f5951cf0b4"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""46e21bc5-55c1-4821-a9f7-1e466a2b9d5c"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Draw"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""041d439a-d1e7-4885-918a-6f6e3d526861"",
                    ""path"": ""<Pen>/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Draw"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a59c1841-412e-4780-8178-70c7ccc4f806"",
                    ""path"": ""<Pen>/tip"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Draw"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""36c62a5f-0277-4598-b0e0-598e9458c8f2"",
                    ""path"": ""<Touchscreen>/touch*/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Draw"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d8a1769d-603d-47a3-9681-d8e498ee5437"",
                    ""path"": ""<Pointer>/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Draw"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""983c7183-618d-4527-bdcc-800c1267fbc9"",
                    ""path"": ""<Pen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d103bdd1-4c26-4e6e-96da-fa2cc6e67643"",
                    ""path"": ""<Touchscreen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7d8618e8-076e-4835-a4c5-592c78ed79d0"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""47176b43-ae8d-4bce-8635-8165c7af36e9"",
                    ""path"": ""<Pointer>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Drawing
        m_Drawing = asset.FindActionMap("Drawing", throwIfNotFound: true);
        m_Drawing_Draw = m_Drawing.FindAction("Draw", throwIfNotFound: true);
        m_Drawing_Position = m_Drawing.FindAction("Position", throwIfNotFound: true);
    }

    ~@DrawingActions()
    {
        Debug.Assert(!m_Drawing.enabled, "This will cause a leak and performance issues, DrawingActions.Drawing.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Drawing
    private readonly InputActionMap m_Drawing;
    private List<IDrawingActions> m_DrawingActionsCallbackInterfaces = new List<IDrawingActions>();
    private readonly InputAction m_Drawing_Draw;
    private readonly InputAction m_Drawing_Position;
    public struct DrawingActionsSet
    {
        private DrawingActions m_Wrapper;
        public DrawingActionsSet(DrawingActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Draw => m_Wrapper.m_Drawing_Draw;
        public InputAction @Position => m_Wrapper.m_Drawing_Position;
        public InputActionMap Get() { return m_Wrapper.m_Drawing; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DrawingActionsSet set) { return set.Get(); }
        public void AddCallbacks(IDrawingActions instance)
        {
            if (instance == null || m_Wrapper.m_DrawingActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DrawingActionsCallbackInterfaces.Add(instance);
            @Draw.started += instance.OnDraw;
            @Draw.performed += instance.OnDraw;
            @Draw.canceled += instance.OnDraw;
            @Position.started += instance.OnPosition;
            @Position.performed += instance.OnPosition;
            @Position.canceled += instance.OnPosition;
        }

        private void UnregisterCallbacks(IDrawingActions instance)
        {
            @Draw.started -= instance.OnDraw;
            @Draw.performed -= instance.OnDraw;
            @Draw.canceled -= instance.OnDraw;
            @Position.started -= instance.OnPosition;
            @Position.performed -= instance.OnPosition;
            @Position.canceled -= instance.OnPosition;
        }

        public void RemoveCallbacks(IDrawingActions instance)
        {
            if (m_Wrapper.m_DrawingActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDrawingActions instance)
        {
            foreach (var item in m_Wrapper.m_DrawingActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DrawingActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DrawingActionsSet @Drawing => new DrawingActionsSet(this);
    public interface IDrawingActions
    {
        void OnDraw(InputAction.CallbackContext context);
        void OnPosition(InputAction.CallbackContext context);
    }
}
